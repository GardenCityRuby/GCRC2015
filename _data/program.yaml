---
- type: misc
  title: Registration
  description: 
  :speakers:
  - name: 
    twitter: 
    email: 
- type: misc
  title: Welcome Note
  description: 
  :speakers:
  - name: 
    twitter: 
    email: 
- type: talk
  title: Keynote
  description: 
  :speakers:
  - name: Konstantin Haase
    twitter: konstantinhaase
    email: konstantin.haase@gmail.com
- type: talk
  title: ActiveRecord can't do it? Arel can!
  description: |-
    ActiveRecord can't do it? Arel can!  Active Record is awesome. But how does ActiveRecord handle generating complex SQL queries? Under the hood it's handled by Arel. Most of the time, Rails developers don't have to know about how Arel works.
    But sometimes Active Record can't satisfy our needs. Also Arel has many strengths not exposed through Active Record.
    Let's experiment with Arel directly and wield great SQL power in database agnostic way.
    Oh and did I mention, this is a fun talk, even for us, to “perform”.
  :speakers:
  - name: Vipul A
    twitter: vipulnsward
    email: vipulnsward@gmail.com
  - name: Prathamesh S
    twitter: _cha1tanya
    email: csonpatki@gmail.com
- type: misc
  title: Coffee break
  description: 
  :speakers:
  - name: 
    twitter: 
    email: 
- type: talk
  title: Immutability Matters
  description: The Ruby codebase and standard libraries make heavy use of mutable
    objects, as does pretty much any mainstream language. Mutable objects are not
    thread-safe, comparatively harder to maintain and write tests for, and with the
    resulting tests being slow and brittle. Thus, it becomes very hard to understand
    applications and libraries written using mutable object states to pass values
    around and perform operation on those values. Immutability resolves a lot of concurrency
    issues (race conditions, dirty read/write etc.), and also simplifies the codebase
    and test cases.
  :speakers:
  - name: Ranjeet Singh
    twitter: 
    email: 
- type: talk
  title: Fun with Ruby and Arduino
  description: "“Internet of things” is the concept of basically connecting any device
    with an on and off switch to the Internet.  IoT has been possible through devices
    like Arduino, Raspberry Pi and many more. Although most of the APIs to work with
    them are available in Ruby, I haven’t seen many projects programmed in Ruby, but
    C++, Python or JS. I would like to share my approach, resources etc I learned
    from and show things that are possible. I hope audience would learn new possibilities
    with Ruby and not have to spent time learning a new language to interact with
    hardware."
  :speakers:
  - name: Anmol Agarwal
    twitter: anmol1771
    email: 
- type: misc
  title: Break
  description: 
  :speakers:
  - name: 
    twitter: 
    email: 
- type: talk
  title: WAT!! ActiveRecord Callbacks
  description: |-
    The talk is about the gotchas of ActiveRecord callbacks even in the most common usage patterns and touches upon some possible alternatives to avoid each of these pitfalls.
    As Rails developers most of us would have inevitably have run into callbacks. This is something easy to get started with but is even easier to lead you into unexpected behaviour in production. Also, due to their unobtrusive nature they can become forgotten landmines.
    Structured in the popular and fun “WAT” style, the focus is mostly on beginner to intermediate levels, others might find one or two anecdotes surprising.
  :speakers:
  - name: Monika M
    twitter: MonikaMhanthapa
    email: 
- type: misc
  title: Lightning Talks
  description: 
  :speakers:
  - name: 
    twitter: 
    email: 
- type: misc
  title: Lunch
  description: 
  :speakers:
  - name: 
    twitter: 
    email: 
- type: talk
  title: Keynote
  description: 
  :speakers:
  - name: Paolo Perrotta
    twitter: nusco
    email: 
- type: talk
  title: Capacity planning with Capybara and RabbitMQ
  description: The number of users a web app can handle simultaneously is tricky to
    determine. Often we go by intuition and choose a deployment architecture which
    is either insufficient or oversized. Most web bench marking tools like ab are
    designed to benchmark the web server and provide unreliable information as the
    test scenario is far off from real world usage. Capybara, the defacto acceptance
    testing framework in rails world combined with rabbitmq can help us in determining
    bottlenecks and choosing the right deployment architecture.The number of users
    a web app can handle simultaneously is tricky to determine. Often we go by intuition
    and choose a deployment architecture which is either insufficient or oversized.
    Most web bench marking tools like ab are designed to benchmark the web server
    and provide unreliable information as the test scenario is far off from real world
    usage. Capybara, the defacto acceptance testing framework in rails world combined
    with rabbitmq can help us in determining bottlenecks and choosing the right deployment
    architecture.
  :speakers:
  - name: Vijayanand Nandam
    twitter: vijayanandam1
    email: 
- type: misc
  title: Coffee break
  description: 
  :speakers:
  - name: 
    twitter: 
    email: 
- type: talk
  title: Resilient by Design
  description: |-
    Modern distributed systems have aggressive requirements around uptime and performance, they need to face harsh realities such as sudden rush of visitors, network issues, tangled databases and other unforeseen bugs.
    With so many moving parts involved even in the simplest of services, it becomes mandatory to adopt defensive patterns which would guard against some of these problems and identify anti-patterns before they trigger cascading failures across systems.
    This talk is for all those developers who hate getting a oncall at 4 AM in the morning
  :speakers:
  - name: Smit Shah
    twitter: Who828
    email: 
- type: talk
  title: Rubinius — Ruby implemented with Ruby
  description: Rubinius is an alternative Ruby language implementation. We would be
    giving a brief overview of Rubinius Internals and would be majorly talking about
    the Heap Dump interface that Rubinius provides for analysis of memory dumps.
  :speakers:
  - name: Akanksha Agarwal, Sana
    twitter: 
    email: 
- type: misc
  title: Coffee break
  description: 
  :speakers:
  - name: 
    twitter: 
    email: 
- type: misc
  title: Panel Discussion
  description: 
  :speakers:
  - name: 
    twitter: 
    email: 
- type: talk
  title: Keynote
  description: 
  :speakers:
  - name: Hemant Kumar
    twitter: gnufied
    email: 
- type: misc
  title: Closing Note
  description: 
  :speakers:
  - name: 
    twitter: 
    email: 
